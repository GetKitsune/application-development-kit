image: microsoft/dotnet:2.1-sdk

# enable Docker for your repository
options:
  docker: true

definitions: 
  steps:
    - step: &build-project
        name: init
        script:
          - echo "Building project"
          # Restore packages and build the project
          - cd ./Kitsune/Kitsune.API2
          - dotnet restore ./Kitsune.API2.csproj -s https://nuget.withfloats.com/api/v2 -s https://api.nuget.org/v3/index.json
          - dotnet publish ./Kitsune.API2.csproj -c Release -o ./obj/Docker/publish
        artifacts:
          - Kitsune/Kitsune.API2/**
          - obj/**
    - step: &deploy-to-ecs
            name: deploy-to-ecs
            image: atlassian/pipelines-awscli:latest
            trigger: manual
            script:
                - ls -a ./Kitsune/Kitsune.API2
                - cd ./Kitsune/Kitsune.API2
                - export BUILD_ID=$BITBUCKET_COMMIT

                # AWS authentication variables
                # set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables
                # set AWS_SECURITY_TOKEN and AWS_SESSION_TOKEN as environment variables if using temporary credentials via AWS STS
                - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-"ap-south-1"} #default is us-east-1

                # Create new image name with unique build id
                - export NEW_IMAGE_NAME="${IMAGE_NAME}:$BUILD_ID"
                - export NEW_IMAGE_URL="${IMAGE_URI}/${NEW_IMAGE_NAME}"

                # Login ECR
                - eval $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                # Build docker image
                - docker build -t $NEW_IMAGE_NAME .
                - docker tag $NEW_IMAGE_NAME $NEW_IMAGE_URL
                - docker push $NEW_IMAGE_URL

                # Create ECS cluster, task, service
                - aws ecs list-clusters | grep "${ECS_CLUSTER_NAME}" || aws ecs create-cluster --cluster-name "${ECS_CLUSTER_NAME}"

                # Updating the existing cluster, task, service
                - aws ecs describe-task-definition --task-definition $ECS_TASK_NAME | jq -c "{containerDefinitions:.taskDefinition.containerDefinitions}" > task_def.json

                # updating the image url of container
                - cat task_def.json |  jq '.containerDefinitions[0].image="'$NEW_IMAGE_URL'"' >  new_task_def.json
                - export TASK_VERSION=$(aws ecs register-task-definition --family $ECS_TASK_NAME --cli-input-json file://./new_task_def.json --region $AWS_DEFAULT_REGION | jq --raw-output '.taskDefinition.revision')
                - echo "Registered ECS Task Definition:" $TASK_VERSION

                # Update ECS Service
                - aws ecs list-services --cluster "${ECS_CLUSTER_NAME}"  | grep "${ECS_SERVICE_NAME}" || aws ecs create-service --service-name "${ECS_SERVICE_NAME}" --cluster "${ECS_CLUSTER_NAME}" --task-definition "${ECS_TASK_NAME}" --desired-count 50
                - aws ecs update-service --cluster "${ECS_CLUSTER_NAME}" --service "${ECS_SERVICE_NAME}" --task-definition "${ECS_TASK_NAME}:$TASK_VERSION"

pipelines:
    branches:
      master-new-flow:
        - step: *build-project
        - step: 
            <<: *deploy-to-ecs
            name: Deploy to production
            deployment: production
      nowfloats:
        - step: *build-project
        - step: 
            <<: *deploy-to-ecs
            name: Deploy to nf-prod
            deployment: nf-production