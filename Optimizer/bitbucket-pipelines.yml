image: node

options:
  docker: true

definitions: 
  steps:
    - step: &build-project
        script: 
            # Build NodeJS Core Project
            - npm install -g yarn
            - yarn install
            - yarn run test

    - step: &deploy-to-ecs
        trigger: manual
        caches:
          - docker
        script:
            # Download the necessary tools to deploy to AWS
            - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD
            - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD
            - apt-get update
            - python --version
            - apt-get -y install python3-dev
            - apt-get -y install python3-pip
            - pip3 install awscli
            - pip3 --help
            - aws --version
            - mkdir ~/bin/
            - wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
            - mv jq-linux64 ~/bin/jq
            - chmod +x ~/bin/jq
            - export PATH=~/bin:$PATH
            # Login ECR 
            - eval $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            # Build and tag image
            - curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            - chmod +x /usr/local/bin/docker-compose
            - docker-compose --version
            - docker-compose build
            - docker tag $IMAGE_NAME_PROD:latest $REPO_URL_PROD:latest
            # push the new Docker image to the Docker registry
            - docker push $REPO_URL_PROD:latest
            # Update Task Revision
            - aws ecs describe-task-definition --task-definition $TASK_NAME_PROD | jq -c "{containerDefinitions:.taskDefinition.containerDefinitions}" > task_def.json
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family $TASK_NAME_PROD --cli-input-json file://./task_def.json --region $AWS_DEFAULT_REGION | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition:" $TASK_VERSION
            # Update the ECS service to use the updated Task versions
            - aws ecs update-service --cluster $CLUSTER_PROD --service $SERVICE_NAME_PROD --task-definition $TASK_NAME_PROD:$TASK_VERSION          

pipelines:
  branches:
    boost-kit:
      - step:
          name: Build and Test
          <<: *build-project
      - step:
          name: Deploy to Production
          <<: *deploy-to-ecs
          caches:
            - docker
          deployment: boost-kit

    master:
      - step:
          name: Build and Test
          <<: *build-project
      - step:
          name: Deploy to Production
          <<: *deploy-to-ecs
          caches:
            - docker
          deployment: kitsune_old_nf_aws_account
